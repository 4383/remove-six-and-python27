# get the filenames
set -e

# Init the environment
output_dir=/tmp/remove-six
if [ -d "${output_dir}" ]; then
    rm -rf ${output_dir}
fi
mkdir ${output_dir}
commited_files=${output_dir}/commited_files
# grab elements to commit
git status --no-ahead-behind --short | awk '{print $2}' > ${commited_files}
# determine the number of needed patches
number_of_files=$(cat ${commited_files} | wc -l)
number_of_patches=$(expr $number_of_files / 10 + 1)

commit_msg=$(cat <<EOF
Remove six and python 2.7 full support

Six is in use to help us to keep support for python 2.7.
Since the ussuri cycle we decide to remove the python 2.7
support so we can go ahead and also remove six usage from
the python code.

Review process and help
-----------------------
Removing six introduce a lot of changes and an huge amount of modified files
To simplify reviews we decided to split changes into several patches to avoid
painful reviews and avoid mistakes.

To review this patch you can use the six documentation [1] to obtain help and
understand choices.

Additional informations
-----------------------
Changes related to 'six.b(data)' [2]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

six.b [2] encode the given datas in latin-1 in python3 so I did the same
things in this patch.

Latin-1 is equal to iso-8859-1 [3].

This encoding is the default encoding [4] of certain descriptive HTTP
headers.

I suggest to keep latin-1 for the moment and to move to another encoding
in a follow-up patch if needed to move to most powerful encoding (utf8).

HTML4 support utf8 charset and utf8 is the default charset for HTML5 [5].

Note that this commit message is autogenerated and not necesserly contains
changes related to 'six.b'

[1] https://six.readthedocs.io/
[2] https://six.readthedocs.io/#six.b
[3] https://docs.python.org/3/library/codecs.html#standard-encodings
[4] https://www.w3schools.com/charsets/ref_html_8859.asp
[5] https://www.w3schools.com/html/html_charset.asp
EOF
)

function prepare () {
    # prepare the treatment
    for el in $(seq 1 ${number_of_patches})
    do
        begining=$((${el} * 10))
        current_file=${output_dir}/${el}-${begining}.log
        head -${begining} ${commited_files} | tail -10 > ${current_file}
    done
}

function check () {
    # check if everything is ok
    for el in $(seq 1 ${number_of_patches})
    do
        begining=$((${el} * 10))
        cat ${output_dir}/${el}-${begining}.log >> ${output_dir}/verification.log
    done
}

function apply () {
    # apply changes
    for el in $(seq 1 ${number_of_patches})
    do
        begining=$((${el} * 10))
        current_file=${output_dir}/${el}-${begining}.log
        index="Patch ${el} of a serie of ${number_of_patches} patches"
        if [ ${el} -eq ${number_of_patches} ]; then
            index="${index}\nsix fully removed now!"
            index="${index}\nThank you six for the rendered services!"
        fi
        msg_file=${output_dir}/cmsg-${el}.txt
        echo -e "${commit_msg}\n\n${index}" > ${msg_file}
        git add $(cat ${current_file})
        git commit -F ${msg_file}
    done
}

prepare
check
apply
